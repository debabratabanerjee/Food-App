{"version":3,"sources":["recipe.module.css","car.module.css","food.png","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","car","src","alt","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","Food","width","height","id","margin","fontSize","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","key","label","navigator","console","log","serviceWorker","register","then","reg","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","ready","registration","unregister","error","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,IAAM,mB,gBCDxBD,EAAOC,QAAU,IAA0B,kC,wOC4B5BC,EAxBD,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,YAClC,OAEI,yBAAKC,UAAWC,IAAMC,QAClB,4BACMN,GAEN,2BAAG,gCACA,wCADA,IACkB,mCAASA,EAAT,QAAoB,2BAAIC,GAAxB,QAGrB,yBAAKG,UAAWG,IAAIA,IAAKC,IAAKN,EAAOO,IAAI,KACzC,wBAAIL,UAAWC,IAAMC,QAArB,gBAEA,4BACKH,EAAYO,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,Y,wBC+ErBC,G,MA7FJ,WAET,IAFe,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,qBAPV,mBAOTK,EAPS,KAOFC,EAPE,KAYfC,qBAAU,WACRC,MAEC,CAACH,IAEF,IAAOG,EAAU,uCAAG,8BAAAC,EAAA,sEACGC,MAAK,0CACSL,EADT,mBAhBf,WAgBe,oBAff,qCAcO,cACdM,EADc,gBAKGA,EAASC,OALZ,OAKVC,EALU,OAMhBX,EAAWW,EAAKC,MANA,2CAAH,qDAuBnB,OACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,aAEb,yBAAKI,IAAKqB,IAAMC,MAAM,MAAMC,OAAO,MAAOtB,IAAI,SAG/C,iCACC,yBAAKL,UAAU,oBACf,4BAAI,gCAAQ,+CACZ,6BACA,wBAAI4B,GAAG,sBAQP,yBAAK5B,UAAU,UAAU,gCAC3B,uBAAGC,MAAO,CAAC4B,OAAQ,cAAnB,IAAkC,uBAAG5B,MAAO,CAAC6B,SAAS,SAApB,uBAAlC,yHAA4M,sCAA5M,IAA2N,6BAC3N,6BACD,2BAAG,4CAAH,4FAAgH,6BAAhH,eAKC,0BAAOC,SAnCO,SAAAC,GAChBA,EAAEC,iBACFjB,EAASH,GACTC,EAAU,KAgCoBd,UAAU,eACpC,2BAAO4B,GAAG,cAAcM,YAAY,uDAAuDlC,UAAU,aAAamC,KAAM,OAAOC,MAAOvB,EAAQwB,SAzC/H,SAAAL,GACnBlB,EAAUkB,EAAEM,OAAOF,UAyCf,4BACER,GAAG,eACH5B,UAAY,gBACZmC,KAAM,UAHR,WAOF,yBAAKnC,UAAU,WACZW,EAAQL,KAAI,SAAAJ,GAAM,OACjB,kBAAC,EAAD,CACEqC,IAAMrC,EAAOA,OAAOsC,MACpB5C,MAAOM,EAAOA,OAAOsC,MACrB3C,SAAWK,EAAOA,OAAOL,SACzBC,MAASI,EAAOA,OAAOJ,MACvBC,YAAeG,EAAOA,OAAOH,qBC9ErC,kBAAmB0C,YACrBC,QAAQC,IAAI,qCACZF,UAAUG,cAAcC,SAAS,qBAC9BC,MAAK,SAASC,GACbL,QAAQC,IAAI,mBACXK,OAAM,SAASC,GAChBP,QAAQC,IAAI,gCAAiCM,OAO/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCzBNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsIpB,kBAAmBlB,WACrBA,UAAUG,cAAcgB,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdd,OAAM,SAAAe,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.2d486c89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2s_2j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"car\":\"car_car__svaRC\"};","module.exports = __webpack_public_path__ + \"static/media/food.e94a69f8.png\";","import React from 'react';\r\nimport style from \"./recipe.module.css\";\r\nimport car from \"./car.module.css\";\r\n\r\nconst Recipe =({ title,calories,image,ingredients}) =>{\r\n    return(\r\n\r\n        <div className={style.recipe}>\r\n            <h1 >\r\n                { title}\r\n            </h1>\r\n            <p><center>\r\n               <h2>Calories</h2> <h3> ~~\"{title}\" is <u>{calories}</u>~~</h3>\r\n               </center>\r\n            </p>\r\n            <img className={car.car} src={image} alt=\"\" />\r\n            <h3 className={style.recipe}>Ingredients:</h3>\r\n\r\n            <ol >\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n\r\n            </ol>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;\r\n","import React,{useEffect,useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\nimport Food from './food.png';\nimport './historybox';\n\nconst App =() => {\n\n  const APP_ID = \"975ee6c5\";\n  const APP_KEY= \"99962e80839965a2e68d765ffd244990\";\n\n  const[recipes, setRecipes] = useState([]);\n  const[search, setSearch] = useState(\"\");\n  const[query, setQuery] = useState(//'chicken'\n  );\n\n\n  \n  useEffect(() =>{\n    getRecipes();\n    \n  }, [query] );\n  \n    const  getRecipes = async () =>{\n    const response = await fetch (\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n\n        const data = await response.json();\n        setRecipes(data.hits);\n  \n    \n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    \n  };\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return(\n    <div className=\"App\">\n      <div className=\"header\">\n      <div className=\"foodongle\">\n\n        <img src={Food} width=\"192\" height=\"192\"  alt=\"logo\"/>\n       \n       \n       <section> \n        <div className=\"historysearchbox\"> \n        <h3><center><s>Search History</s></center></h3>\n        <div>\n        <ul id=\"searchHistory\"></ul>\n        </div> \n        </div>\n       </section>\n        \n        </div>\n\n\n        <div className=\"foodiz\" ><center>\n      <p style={{margin: \"16px 16px\"}}> <p style={{fontSize:\"30px\"}}>Welcome!!! Foodizzz</p> Here you Just need to search for any items and you can  see the magic it does by giving some related Dishes for your <b>Keyword</b> <br/>\n      <br/>     \n     <i><b> # Remember :</b> Its just made to show use of api which is ofcourse free so it may not be up to the mark.<br/> T.Y!!!</i></p>\n      \n      </center>\n      </div>\n      </div>\n      <form  onSubmit={getSearch} className=\"search-form\">\n        <input id=\"searchInput\" placeholder=\"i.e, banana,cake(you will be amazed by clicking CAT)\" className=\"search-bar\" type =\"text\" value={search} onChange={updateSearch} />\n        <button \n          id=\"searchButton\" \n          className = \"search-button\" \n          type =\"submit\">\n          Search\n        </button>\n      </form>  \n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe \n            key ={recipe.recipe.label}\n            title={recipe.recipe.label} \n            calories={ recipe.recipe.calories}\n            image = {recipe.recipe.image}\n            ingredients = {recipe.recipe.ingredients}\n        />\n      ))}       \n    </div>\n    </div>\n    \n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nif ('serviceWorker' in navigator) {\n  console.log(\"Will the service worker register?\");\n  navigator.serviceWorker.register('service-worker.js')\n    .then(function(reg){\n      console.log(\"Yes, it did.\");\n    }).catch(function(err) {\n      console.log(\"No it didn't. This happened: \", err)\n    });\n}\n\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}